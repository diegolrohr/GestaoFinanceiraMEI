<script>
    String.prototype.capitalize = function () {
        return this.charAt(0).toUpperCase() + this.slice(1);
    }

    String.prototype.removeCapitalize = function () {
        return this.charAt(0).toLowerCase() + this.slice(1);
    }

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };

    String.prototype.stringFormat = function () {
        var formatted = this;
        for (var i = 0; i < arguments.length; i++) {
            var regexp = new RegExp('\\{' + i + '\\}', 'gi');
            formatted = formatted.replace(regexp, arguments[i]);
        }
        return formatted;
    };

    function TryParseFloat(str, defaultValue) {
        if (!defaultValue || defaultValue == undefined)
            defaultValue = 0;

        var retValue = defaultValue;

        if (str !== null) {
            if (str.toString().length > 0) {
                if (typeof str === 'number') {
                    retValue = str;
                }
                else {
                    retValue = parseFloat(str.replace(/\s/g, "").replace(',', '.'));
                }
            }
        }
        return retValue;
    }

    function TryParseInt(str, defaultValue) {
        if (!defaultValue || defaultValue == undefined)
            defaultValue = 0;

        var retValue = defaultValue;

        if (str !== null) {
            if (str.toString().length > 0) {
                if (!isNaN(str)) {
                    retValue = parseInt(str, 10);
                }
            }
        }
        return retValue;
    }

    function format(v, n, x, s, c) {
        if (typeof v !== 'number') {
            v = TryParseFloat(v);
        }

        var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
                num = v.toFixed(Math.max(0, ~~n));
        return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ''));
    }

    function formatMoney(value) {
        return format(value, 2, 3, '.', ',');
    }

    function formatDecimal(value, decimal) {

        if (!decimal)
            decimal = 2;

        //var customMask = obj.data("customMask");

        //if (customMask != undefined && customMask.indexOf("_") !== -1)
        //    decimal = customMask.substr(customMask.indexOf("_") + 1);

        return format(value, decimal, 3, '.', ',');
    }

    function UpdateStringValue(obj, val) {
        if (!obj.jquery)
            obj = $(obj);

        if (obj == undefined || !obj.length > 0) {
            return;
        }

        try {

            if (val != null && val.toString().indexOf('/Date(') >= 0) {
                var newDate = new Date(parseInt(val.substr(6)));
                obj.val(FormatDate(newDate));
            }
                //else if (!isNaN(val) && typeof val === 'number') { // && (val.toString().indexOf('.') > 0 || val.toString().indexOf(',') > 0)) {
                //    if (obj.is('span')) {
                //        obj.text(formatDecimal(GetStringValue(val, obj.val())));
                //    }
                //    else {
                //        obj.val(formatDecimal(GetStringValue(val, obj.val())));
                //    }
                //}
            else {
                if (obj.is('span')) {
                    obj.text(formatDecimal(GetStringValue(val, obj.val())));
                }
                else {
                    obj.val(GetStringValue(val, obj.val()));
                }
            }
        }
        catch (err) {
            //alert( err);
            console("erro na UpdateStringValue", err);
            obj.val(GetStringValue(val, obj.val()));
        }
    }

    function FormatDate(today) {
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd
        }
        if (mm < 10) {
            mm = '0' + mm
        }

        var result = yyyy + '-' + mm + '-' + dd;

        if (yyyy + mm + dd < '17530101')
            result = "";

        //alert(result);
        return result;
    }

    function GetStringValue(str, defaultValue) {
        if (!defaultValue || defaultValue == undefined)
            defaultValue = "";

        var retValue = defaultValue;

        if (str !== null && str != undefined) {
            if (str.toString().length > 0) {
                retValue = str;
            }
        }
        return retValue;
    }
 
    // integer n: length of decimal
    // integer x: length of whole part
    // mixed   s: sections delimiter
    // mixed   c: decimal delimiter
    //
    Number.prototype.formatMoneyMask = function (n, x, s, c) {
        var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
            num = this.toFixed(Math.max(0, ~~n));


        return (c ? num.replace('.', c) : num.replace('.', ',')).replace(new RegExp(re, 'g'), '$&' + (s || '.'));
    };

    String.prototype.removeMoneyMask = function () {
        var e = this;
        if (!e)
            return 0;

        var noDots = e.replace('.', '');
        var noCoin = noDots.replace('R$', '').replace('R$ ', '');
        var noSpace = noCoin.replace(' ', '');
        var valFloat = parseFloat(noSpace.replace(',', '.'));

        return valFloat;
    }

    function noComma(e) {
        if (typeof e === "string") {
            return e.replace(',', '.');
        }
    }

</script>