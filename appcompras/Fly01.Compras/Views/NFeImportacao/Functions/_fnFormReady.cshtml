<script>
    @Html.Partial("Functions/_fnMain");
    var tss = 0;

    function fnBindOverrideSubmit() {
        $("form#fly01frm").off("submit");
        $("form#fly01frm").on("submit", function (e) {
            e.preventDefault();
            $$$.loading.start();

            if (isCreate()) {
                if (!window.FileReader) return; // Browser is not compatible
                if ($("#arquivoXML")[0].files[0] == null) {
                    $$$.loading.stop();
                    $$$.toast('Selecione um arquivo de xml para importação', 'error');
                    return;
                }
                var reader = new FileReader();
                // Read file into memory as UTF-8
                reader.readAsText($("#arquivoXML")[0].files[0]);
                var tipo = ($("#arquivoXML")[0].files[0].type);
                if (tipo === "text/xml") {
                    reader.onload = processData;
                    reader.onerror = errorHandler;
                }
                else {
                    $$$.loading.stop();
                    $$$.toast("Não foi possível ler o arquivo! Verifique o tipo do arquivo", "error");
                }
            }
            else {
                if (!$(this).valid()) {
                    $$$.loading.stop();
                    return false;
                }
                var jsonData = $(this).serializeObject();

                if ($('input#finalizarImportacao:checked').val() === "true") {
                    jsonData.status = "Finalizado";
                }

                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: "POST",
                    url: "@Url.Action("Edit", "NFeImportacao")",
                    data: JSON.stringify({ 'entityVM': jsonData }),
                    success: function success(data) {
                        if (data.success) {
                            $$$.loading.stop();
                            var strMsg = "Cadastrado com sucesso.";
                            $$$.toast(strMsg, "success");
                            $$$.go("@Url.Action("List","NFeImportacao")");
                        } else {
                            $$$.loading.stop();
                            $$$.fn.submitErrorHandler(null, data.message);
                        }
                    },
                    error: function error(jXHR, textStatus) {
                        $$$.toast(textStatus, "error");
                        $$$.loading.stop();
                    }
                });
            }
        });
    }

    function processData(event) {
        var resultData = true;
        var xmlImportado = event.target.result;
        $.ajax({
            type: "POST",
            url: "@Url.Action("ImportaArquivoXML", "NFeImportacao")",
            data: { conteudo: xmlImportado},
            success: function (data) {
                if (data.success) {
                    var strMsg = "Importado com sucesso.";
                    $("form#fly01frm input#id").val(data.id);

                    var url = window.location.href.replace('/Create', '/Edit/' + data.id);
                    window.history.pushState({}, document.title, url);
                    $("form#fly01frm").data("action", "@Url.Action("Edit", "Pedido")");

                    if (data.tipoFrete === "SemFrete" || !data.hasTagTransportadora) {
                        $('#stepTransportadora').hide();
                    }
                    $('#stepImportarArquivo').hide();
                    $('#stepFornecedor > div.step-content > div.step-actions > button.btn.previous-step').hide();
                    $('li#stepFornecedor div.step-title').click();
                    $$$._.fly01frm.refresh(data.id);
                    $("input#geraFinanceiro").prop("checked", true);
                    $("input#geraContasXml").prop("checked", true);
                    fnValidaCamposGeraFinanceiro();
                    fnChkGeraContasXml();

                    $$$._.dtProdutosPendencias.refresh();
                    $$$._.dtCobrancas.refresh();

                    $$$.loading.stop();
                    $$$.toast(strMsg, "success");
                    return true;
                } else {
                    resultData = data.success;
                    $$$.loading.stop();
                    $$$.fn.submitErrorHandler(null, data.message);
                }
            },
            error: function error(jXHR, textStatus) {
                $$$.toast(textStatus, "error");
                $$$.loading.stop();
            }
        });
        if (!resultData)
            $('#stepFornecedor > div.step-content > div.step-actions > button.btn.previous-step').click();
    }

    function errorHandler(evt) {
        if (evt.target.error.name === "NotReadableError") {
            alert("Não foi possível ler o arquivo!");
        }
    }

    function isCreate() {
        var id = $("form#fly01frm input#id").val();

        if (id.length === 0)
            return true;

        return false;
    }

    function fnBindStepsWizard() {
        function saveArquivo() {
            if (isCreate() && ($("li#stepImportarArquivo").hasClass("active"))) {
                return $("form#fly01frm").submit();
            }
        }
        $('li#stepFornecedor div.step-title').click(function () {
            saveArquivo();
        });
        $('#stepImportarArquivo > div.step-content > div.step-actions > button.btn.next-step').click(function () {
            saveArquivo();
        });
    }

    function verificaPendencias() {
        if ($$$._.dtProdutosPendencias.ajax.json().recordsTotal > 0) {
            $('#stepProdutos').hide();
            $('input#finalizarImportacao').attr('disabled', 'disabled');
            $("input#finalizarImportacao").prop("checked", false);
            return true;
        }
        else {
            $$$._.dtProdutosResolvidos.refresh();
            $('#stepProdutos').show();
            $('input#finalizarImportacao').removeAttr('disabled');
            return false;
        }
    }

    function fnSetInformacoes() {
        $("#infoProdutosPendenciasField")[0].innerText = "";
        $("#infoProdutosField")[0].innerText = "";

        var textPendencias = [
            createElem("span", null, "Abaixo está listado os produtos importados do xml, que não foram vinculado com nenhum código de barras existente em seu cadastro de produtos."),
            createElem("br"),
            createElem("span", null, "Escolha entre excluir a vinculação, criar um novo produto com base nas informações do xml ou ainda vincular a um produto existente."),
            createElem("br"),
            createElem("span", null, "Caso a unidade de medida do xml e a unidade de medida do produto selecionado seja distinta, você pode especificar o fator de conversão."),
            createElem("br"),
            createElem("span", null, "Salve sua solução de pendência escolhida, para cada produto importado."),
            createElem("br"),
            createElem("span", null, "A criação dos novos produtos, ocorre na finalização da importação.")
        ];

        var textProdutos = [
            createElem("span", null, "Abaixo está listado os produtos importados do xml, que não foram excluídos na revisão de pendências."),
            createElem("br"),
            createElem("span",null, "Escolha as operações que deseja realizar para cada produto. "),
            createElem("br"),
            createElem("span", null, "Se marcar Movimentar Estoque, será realizada a movimentação de entrada da quantidade total dos produtos. "),
            createElem("br"),
            createElem("span", null, "Se marcar Atualizar Produto, serão atualizados os dados no seu cadastro de produto, com base nas informações do xml(descrição, código de barras, valor de custo, ncm e cest). "),
            createElem("br"),
            createElem("span", null, "Se marcar Atualizar Valor Venda, ao clicar em Alterar Valor Venda, será aplicado a configuração de valor, a todos os marcados, resultado final visível na coluna Valor Venda " ),
            createElem("br"),
            createElem("span", null, "ou se desejar informe um valor específico para cada produto. O valor será atualizado no cadastro do produto. "),
            createElem("br"),
            createElem("span", null, "Caso a unidade de medida do xml e a unidade de medida do produto selecionado seja distinta, será considerado o fator de conversão especificado na etapa das pendências. "),
            createElem("br"),
            createElem("span", null, "Todas as operações escolhidas, são efetivadas na finalização da importação.")
         ];

        $("#infoProdutosPendenciasField").append(createElem("ul",
            { "class": "collapsible", "data-collapsible": "accordion" },
            createElem("li", null, [
                createElem("div", { "class": "collapsible-header" }, createElem("h6", { "class": "orange-text light"}, "Mais informações")),
                createElem("div", { "class": "collapsible-body" }, textPendencias)
            ])
        ));

        $("#infoProdutosField").append(createElem("ul",
            { "class": "collapsible", "data-collapsible": "accordion" },
            createElem("li", null, [
                createElem("div", { "class": "collapsible-header" }, createElem("h6", { "class": "orange-text light" }, "Mais informações")),
                createElem("div", { "class": "collapsible-body" }, createElem("span", { "class": "text-justify" }, textProdutos))
            ])
        ));
    }

    function fnFormReady() {
        $$$.loading.start();
        fnSetInformacoes();
        $('.collapsible').collapsible();

        fnValidaCamposGeraFinanceiro();
        fnChkGeraContasXml();
        if (isCreate()) {
            var today = new Date();
            $$$.fn.updateTextFields();
            fnBindStepsWizard();
            $('#stepProdutos').hide();
        } else {
            if ($('#tipoFrete').val() === "SemFrete" || $('#transportadoraRazaoSocialXml').val().length === 0){
                $('#stepTransportadora').hide();
            }
            $('#stepImportarArquivo').hide();
            $('#stepFornecedor > div.step-content > div.step-actions > button.btn.previous-step').hide();
            $('li#stepFornecedor div.step-title').click();
            $$$._.dtProdutosPendencias.refresh();
        }

        fnRegras("#fornecedorNome", "#atualizaDadosFornecedor", "#novoFornecedor");
        fnRegras("#transportadoraNome", "#atualizaDadosTransportadora", "#novaTransportadora");
        fnBindOverrideSubmit();
        $$$._.dtCobrancas.refresh();
        fnRegrasProdutos();
        $$$.loading.stop();
    }

    function fnRegras(idComplete, idAtualizar, idNovo) {
        if ($(idComplete).val() === "") {
            $(idAtualizar+"Field").hide();
            $(idNovo+"Field").show();
            $(idNovo).prop('checked', true);
            $("input" + idComplete).removeClass("invalid");
            $("input" + idComplete).rules("remove", "required");
        } else {
            $(idAtualizar+"Field").show();
            $(idNovo + "Field").hide();
            $(idNovo).prop('checked', false);
            $("input" + idComplete).rules("add", { required: true });
        }

        $(idComplete).on("blur", function () {
            if ($(idComplete).val() === "") {
                $(idAtualizar + "Field").hide();
                $(idNovo + "Field").show();
                $(idNovo).prop("checked", true);
                $("input" + idComplete).removeClass("invalid");
                $("input" + idComplete).rules("remove", "required");

            } else {
                $(idAtualizar + "Field").show();
                $(idNovo + "Field").hide();
                $(idNovo).prop("checked", false);
                $("input" + idComplete).rules("add", { required: true });
            }
        });

        $(idNovo).on("click", function (e) {
            if (e.target.checked === true) {
                $("input"+idComplete).removeClass("invalid");
                $("input" + idComplete).rules("remove", "required");
            }
            else {
                $("input" + idComplete).rules("add", { required: true });
            }
        });
    }

    function fnRegrasProdutos() {
        function testeProdutoActive(e) {
            if ($('#stepProdutos')[0].className === "step active" && e.currentTarget.innerHTML !== "Produtos") {
                fnBindOverrideSubmitProduto();
            }
        }

        $('#fly01frm div.step-title').click(function (e) {
            testeProdutoActive(e);
        });

        $('#stepProdutos > div.step-content > div.step-actions > button.btn.next-step').click(function (e) {
            fnBindOverrideSubmitProduto();
        });

        $('#stepProdutos > div.step-content > div.step-actions > button.btn.previous-step').click(function (e) {
            fnBindOverrideSubmitProduto();
        });
    }

    function fnBindOverrideSubmitProduto() {
        if ($$$._.dtProdutosResolvidos.ajax.json() !== undefined) {
            if ($$$._.dtProdutosResolvidos.ajax.json().recordsTotal > 0) {
                $$$._.dtProdutosResolvidos.data().each(function (row) {

                    $$$.loading.start();

                    row.atualizaDadosProduto = $('#atualizaDadosProduto' + row.id).prop('checked');
                    row.movimentaEstoque = $('#movimentaEstoque' + row.id).prop('checked');
                    row.atualizaValorVenda = $('#atualizaValorVenda' + row.id).prop('checked');
                    row.valorVenda = $('input#valorVenda' + row.id).val();

                    $.ajax({
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        type: "POST",
                        url: "@Url.Action("EditProdutoImportacao", "NFeImportacaoProduto")",
                        data: JSON.stringify({ 'entityVM': row }),
                        success: function success(data) {
                            if (data.success) {
                                $$$.loading.stop();
                            } else {
                                $$$.loading.stop();
                                $$$.fn.submitErrorHandler(null, data.message);
                            }
                        },
                        error: function error(jXHR, textStatus) {
                            $$$.toast(textStatus, "error");
                            $$$.loading.stop();
                        }
                    });
                });
                $$$.loading.stop();
            }
        }
    }
</script>